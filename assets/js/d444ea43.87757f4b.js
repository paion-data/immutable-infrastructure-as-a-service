"use strict";(self.webpackChunkhashicorp_aws=self.webpackChunkhashicorp_aws||[]).push([[1014],{1890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=n(4848),i=n(8453);const a={slug:"aws-s3-concepts",title:"Amazon S3 concepts",authors:["jiaqi"],tags:["AWS"]},o=void 0,r={permalink:"/hashicorp-aws/blog/aws-s3-concepts",editUrl:"https://github.com/QubitPi/hashicorp-aws/tree/master/docs/blog/2020-09-19-amazon-s3/index.md",source:"@site/blog/2020-09-19-amazon-s3/index.md",title:"Amazon S3 concepts",description:"[//]: # (Copyright Jiaqi Liu)",date:"2020-09-19T00:00:00.000Z",formattedDate:"September 19, 2020",tags:[{label:"AWS",permalink:"/hashicorp-aws/blog/tags/aws"}],readingTime:7.955,hasTruncateMarker:!1,authors:[{name:"Jiaqi Liu",title:"Maintainer of hashicorp-aws",url:"https://github.com/QubitPi",imageURL:"https://avatars.githubusercontent.com/u/16126939?v=4",key:"jiaqi"}],frontMatter:{slug:"aws-s3-concepts",title:"Amazon S3 concepts",authors:["jiaqi"],tags:["AWS"]},unlisted:!1,prevItem:{title:"Trunk-Based Development",permalink:"/hashicorp-aws/blog/trunk-based-deployment"}},c={authorsImageUrls:[void 0]},l=[{value:"Buckets",id:"buckets",level:2},{value:"Objects",id:"objects",level:2},{value:"Keys",id:"keys",level:2},{value:"Regions",id:"regions",level:2},{value:"Amazon S3 Data Consistency Model",id:"amazon-s3-data-consistency-model",level:2},{value:"Concurrent applications",id:"concurrent-applications",level:3},{value:"Prefix - Listing Keys Hierarchically Using a Prefix and Delimiter",id:"prefix---listing-keys-hierarchically-using-a-prefix-and-delimiter",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"buckets",children:"Buckets"}),"\n",(0,s.jsxs)(t.p,{children:["A bucket is a container for objects stored in Amazon S3. Every object is contained in a bucket. For example, if the\nobject named ",(0,s.jsx)(t.code,{children:"photos/puppy.jpg"})," is stored in the ",(0,s.jsx)(t.code,{children:"awsexamplebucket1"})," bucket in the US West (Oregon) Region, then it\nis addressable using the URL ",(0,s.jsx)(t.code,{children:"https://awsexamplebucket1.s3.us-west-2.amazonaws.com/photos/puppy.jpg"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Buckets serve several purposes:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"They organize the Amazon S3 namespace at the highest level."}),"\n",(0,s.jsx)(t.li,{children:"They identify the account responsible for storage and data transfer charges."}),"\n",(0,s.jsx)(t.li,{children:"They play a role in access control."}),"\n",(0,s.jsx)(t.li,{children:"They serve as the unit of aggregation for usage reporting."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["You can configure buckets so that they are created in a specific AWS Region. For more information, see\n",(0,s.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro",children:"Accessing a Bucket"}),". You can\nalso configure a bucket so that every time an object is added to it, Amazon S3 generates a unique version ID and assigns\nit to the object. For more information, see\n",(0,s.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html",children:"Using Versioning"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["For more information about buckets, see\n",(0,s.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html",children:"Working with Amazon S3 Buckets"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"objects",children:"Objects"}),"\n",(0,s.jsxs)(t.p,{children:["Objects are the fundamental entities stored in Amazon S3. Objects consist of object data and metadata. The data portion\nis opaque to Amazon S3. The metadata is a set of name-value pairs that describe the object. These include some default\nmetadata, such as the date last modified, and standard HTTP metadata, such as ",(0,s.jsx)(t.code,{children:"Content-Type"}),". You can also specify\ncustom metadata at the time the object is stored."]}),"\n",(0,s.jsxs)(t.p,{children:["An object is uniquely identified within a bucket by a key (name) and a version ID. For more information, see\n",(0,s.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html#BasicsKeys",children:"Keys"})," and\n",(0,s.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html",children:"Using Versioning"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"keys",children:"Keys"}),"\n",(0,s.jsxs)(t.p,{children:['A key is the unique identifier for an object within a bucket. Every object in a bucket has exactly one key. The\ncombination of a bucket, key, and version ID uniquely identify each object. So you can think of Amazon S3 as a basic\ndata map between "bucket + key + version" and the object itself. Every object in Amazon S3 can be uniquely addressed\nthrough the combination of the web service endpoint, bucket name, key, and optionally, a version. For example, in the\nURL ',(0,s.jsx)(t.code,{children:"https://doc.s3.amazonaws.com/2006-03-01/AmazonS3.wsdl"}),', "',(0,s.jsx)(t.code,{children:"doc"}),'" is the name of the bucket and\n"',(0,s.jsx)(t.code,{children:"2006-03-01/AmazonS3.wsdl"}),'" is the key.']}),"\n",(0,s.jsxs)(t.p,{children:["For more information about object keys, see\n",(0,s.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys",children:"Object Keys"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"regions",children:"Regions"}),"\n",(0,s.jsx)(t.p,{children:"You can choose the geographical AWS Region where Amazon S3 will store the buckets that you create. You might choose a\nRegion to optimize latency, minimize costs, or address regulatory requirements. Objects stored in a Region never leave\nthe Region unless you explicitly transfer them to another Region. For example, objects stored in the Europe (Ireland)\nRegion never leave it."}),"\n",(0,s.jsx)(t.h2,{id:"amazon-s3-data-consistency-model",children:"Amazon S3 Data Consistency Model"}),"\n",(0,s.jsx)(t.p,{children:"Amazon S3 provides read-after-write consistency for PUTS of new objects in your S3 bucket in all Regions with one\ncaveat. The caveat is that if you make a HEAD or GET request to a key name before the object is created, then create\nthe object shortly after that, a subsequent GET might not return the object due to eventual consistency."}),"\n",(0,s.jsx)(t.p,{children:"Amazon S3 offers eventual consistency for overwrite PUTS and DELETES in all Regions."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Updates to a single key are atomic"}),". For example, if you PUT to an existing key, a subsequent read might return the\nold data or the updated data, but it never returns corrupted or partial data."]}),"\n",(0,s.jsx)(t.p,{children:"Amazon S3 achieves high availability by replicating data across multiple servers within AWS data centers. If a PUT\nrequest is successful, your data is safely stored. However, information about the changes must replicate across Amazon\nS3, which can take some time, and so you might observe the following behaviors:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"A process writes a new object to Amazon S3 and immediately lists keys within its bucket. Until the change is fully\npropagated, the object might not appear in the list."}),"\n",(0,s.jsx)(t.li,{children:"A process replaces an existing object and immediately tries to read it. Until the change is fully propagated, Amazon\nS3 might return the previous data."}),"\n",(0,s.jsx)(t.li,{children:"A process deletes an existing object and immediately tries to read it. Until the deletion is fully propagated, Amazon\nS3 might return the deleted data."}),"\n",(0,s.jsx)(t.li,{children:"A process deletes an existing object and immediately lists keys within its bucket. Until the deletion is fully\npropagated, Amazon S3 might list the deleted object."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Updates are key-based. There is no way to make atomic updates across keys"}),". For example, you cannot make the update\nof one key dependent on the update of another key unless you design this functionality into your application."]}),"\n",(0,s.jsx)(t.p,{children:"Buckets have a similar consistency model, with the same caveats. For example, if you delete a bucket and immediately\nlist all buckets, Amazon S3 might still appear in the list."}),"\n",(0,s.jsx)(t.p,{children:"The following table describes the characteristics of an eventually consistent read and a consistent read:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Eventually consistent read"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Consistent read"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Stale reads possible"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"No stale reads"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Lowest read latency"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Potential higher read latency"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Highest read throughput"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Potential lower read throughput"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"concurrent-applications",children:"Concurrent applications"}),"\n",(0,s.jsxs)(t.p,{children:["In this example, both W1 (write 1) and W2 (write 2) complete before the start of R1 (read 1) and R2 (read 2). For a\nconsistent read, R1 and R2 both return ",(0,s.jsx)(t.code,{children:"color = ruby"}),". For an eventually consistent read, R1 and R2 might return\n",(0,s.jsx)(t.code,{children:"color = red"})," or ",(0,s.jsx)(t.code,{children:"color = ruby"})," depending on the amount of time that has elapsed."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Consistency Example 1",src:n(3390).A+"",width:"600",height:"383"})}),"\n",(0,s.jsxs)(t.p,{children:["In the next example, W2 does not complete before the start of R1. Therefore, R1 might return ",(0,s.jsx)(t.code,{children:"color = ruby"})," or\n",(0,s.jsx)(t.code,{children:"color = garnet"})," for either a consistent read or an eventually consistent read. Also, depending on the amount of time\nthat has elapsed, an eventually consistent read might return no results."]}),"\n",(0,s.jsxs)(t.p,{children:["For a consistent read, R2 returns ",(0,s.jsx)(t.code,{children:"color = garnet"}),". For an eventually consistent read, R2 might return\n",(0,s.jsx)(t.code,{children:"color = ruby"})," or color = garnet depending on the amount of time that has elapsed."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Consistency Example 2",src:n(5189).A+"",width:"600",height:"379"})}),"\n",(0,s.jsxs)(t.p,{children:["In the last example, Client 2 performs W2 before Amazon S3 returns a success for W1, so the outcome of the final value\nis unknown (",(0,s.jsx)(t.code,{children:"color = garnet"})," or ",(0,s.jsx)(t.code,{children:"color = brick"}),"). Any subsequent reads (consistent read or eventually consistent)\nmight return either value. Also, depending on the amount of time that has elapsed, an eventually consistent read might\nreturn no results."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Consistency Example 3",src:n(5772).A+"",width:"600",height:"380"})}),"\n",(0,s.jsx)(t.h2,{id:"prefix---listing-keys-hierarchically-using-a-prefix-and-delimiter",children:"Prefix - Listing Keys Hierarchically Using a Prefix and Delimiter"}),"\n",(0,s.jsxs)(t.p,{children:['A "prefix", or "key prefix" is a ',(0,s.jsx)(t.strong,{children:"logical"})," grouping of the objects in a bucket. The prefix value is similar to a\ndirectory name that enables you to store similar data under the same directory in a bucket. ",(0,s.jsx)(t.strong,{children:'Note that Amazon S3 does\nnot have the concept of "directory"'}),'. There is only objects whose keys are prefixed in a way that looks like a\n"directory". For example']}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-console",children:"zoo/west-side/fish/little-fish.png\n"})}),"\n",(0,s.jsxs)(t.p,{children:["There is no such directories called ",(0,s.jsx)(t.code,{children:"zoo"}),", ",(0,s.jsx)(t.code,{children:"west-side"}),", ",(0,s.jsx)(t.code,{children:"fish"}),". In this case the :ref:",(0,s.jsx)(t.code,{children:"key <concept-keys>"})," for the\nimage ",(0,s.jsx)(t.code,{children:"little-fish.png"})," is ",(0,s.jsx)(t.code,{children:"zoo/west-side/fish/"}),", a string essentially."]}),"\n",(0,s.jsx)(t.p,{children:"The prefix and delimiter parameters limit the kind of results returned by a list operation. The prefix limits the\nresults to only those keys that begin with the specified prefix. The delimiter causes a list operation to roll up all\nthe keys that share a common prefix into a single summary list result."}),"\n",(0,s.jsx)(t.p,{children:"The purpose of the prefix and delimiter parameters is to help you organize and then browse your keys hierarchically. To\ndo this, first pick a delimiter for your bucket, such as slash (/), that doesn't occur in any of your anticipated key\nnames. Next, construct your key names by concatenating all containing levels of the hierarchy, separating each level\nwith the delimiter."}),"\n",(0,s.jsx)(t.p,{children:"For example, if you were storing information about cities, you might naturally organize them by continent, then by\ncountry, then by state. Because these names do not usually contain punctuation, you might select slash (/) as the\ndelimiter. The following examples use a slash (/) delimiter."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Europe/France/Nouvelle-Aquitaine/Bordeaux"}),"\n",(0,s.jsx)(t.li,{children:"North America/Canada/Quebec/Montreal"}),"\n",(0,s.jsx)(t.li,{children:"North America/USA/Washington/Bellevue"}),"\n",(0,s.jsx)(t.li,{children:"North America/USA/Washington/Seattle"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["By using ",(0,s.jsx)(t.code,{children:"Prefix"})," and ",(0,s.jsx)(t.code,{children:"Delimiter"})," with the list operation, you can use the hierarchy you've created to list your\ndata. For example, to list all the states in USA, set ",(0,s.jsx)(t.code,{children:"Delimiter='/'"})," and ",(0,s.jsx)(t.code,{children:"Prefix='North America/USA/'"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["A list request with a delimiter lets you browse your hierarchy at just one level, skipping over and summarizing the\n(possibly millions of) keys nested at deeper levels. For example, assume you have a bucket (",(0,s.jsx)(t.code,{children:"ExampleBucket"}),") with the\nfollowing keys."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-console",children:"sample.jpg\n\nphotos/2006/January/sample.jpg\n\nphotos/2006/February/sample2.jpg\n\nphotos/2006/February/sample3.jpg\n\nphotos/2006/February/sample4.jpg\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The sample bucket has only the ",(0,s.jsx)(t.code,{children:"sample.jpg"})," object at the root level. To list only the root level objects in the\nbucket you send a GET request on the bucket with ",(0,s.jsx)(t.code,{children:'"/"'})," delimiter character. In response, Amazon S3 returns the\n",(0,s.jsx)(t.code,{children:"sample.jpg"})," object key because it does not contain the ",(0,s.jsx)(t.code,{children:'"/"'})," delimiter character. All other keys contain the\ndelimiter character. Amazon S3 groups these keys and return a single ",(0,s.jsx)(t.code,{children:"CommonPrefixes"})," element with prefix value\n",(0,s.jsx)(t.code,{children:"photos/"})," that is a substring from the beginning of these keys to the first occurrence of the specified delimiter."]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},3390:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/consistency1-ac1fc52c5b41af7906030f18bdda8e94.png"},5189:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/consistency2-c2584e06372061382dd0a05659b6ffe1.png"},5772:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/consistency3-91ca06e1480234dab69091f8ad34c048.png"},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(6540);const i={},a=s.createContext(i);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);